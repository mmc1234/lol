/*
 * Copyright 2021. mmc1234
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.mmc1234.lol.render;

import org.lwjgl.opengl.*;

public class DebugUtil {
    public static String getSourceDescription(int source) {
        return switch (source) {
            case KHRDebug.GL_DEBUG_SOURCE_API -> "Calls to the OpenGL API";
            case KHRDebug.GL_DEBUG_SOURCE_WINDOW_SYSTEM -> "Calls to a window-system API";
            case KHRDebug.GL_DEBUG_SOURCE_SHADER_COMPILER -> "A compiler for a shading language";
            case KHRDebug.GL_DEBUG_SOURCE_THIRD_PARTY -> "An application associated with OpenGL";
            case KHRDebug.GL_DEBUG_SOURCE_APPLICATION -> "Generated by the user of this application";
            case KHRDebug.GL_DEBUG_SOURCE_OTHER -> "Some source that isn't one of these";
            default -> "Unknown source";
        };
    }

    public static String getSeverityDescription(int severity) {
        return switch (severity) {
            case KHRDebug.GL_DEBUG_SEVERITY_HIGH -> "All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior";
            case KHRDebug.GL_DEBUG_SEVERITY_MEDIUM -> "Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality";
            case KHRDebug.GL_DEBUG_SEVERITY_LOW -> "Redundant state change performance warning, or unimportant undefined behavior";
            case KHRDebug.GL_DEBUG_SEVERITY_NOTIFICATION -> "Anything that isn't an error or performance issue.";
            default -> "Unknown severity";
        };
    }

    public static String getTypeDescription(int type) {
        return switch (type) {
            case KHRDebug.GL_DEBUG_TYPE_ERROR -> "An error, typically from the API";
            case KHRDebug.GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR -> "Some behavior marked deprecated has been used";
            case KHRDebug.GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR -> "Something has invoked undefined behavior";
            case KHRDebug.GL_DEBUG_TYPE_PORTABILITY -> "Some functionality the user relies upon is not portable";
            case KHRDebug.GL_DEBUG_TYPE_PERFORMANCE -> "Code has triggered possible performance issues";
            case KHRDebug.GL_DEBUG_TYPE_MARKER -> "Command stream annotation";
            case KHRDebug.GL_DEBUG_TYPE_PUSH_GROUP -> "Group pushing";
            case KHRDebug.GL_DEBUG_TYPE_POP_GROUP -> "foo";
            case KHRDebug.GL_DEBUG_TYPE_OTHER -> "Some type that isn't one of these";
            default -> "Unknown type";
        };
    }
}
